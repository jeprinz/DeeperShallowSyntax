I should make a new field in the constructor type called "messages", which is another list of terms.
When a message is created, it gets constraint filled like a hiddenConstraint. The only difference is that it
keeps track of the tree made up by the message, and shows it to the user at that location when it is done.

Maybe I should also consider having a way to show raw terms for debugging purposes? 



The main thing I need to figure out how is how to make a language for describing syntax that can capture itself.
I could just have part of it that it processes afterwards, but it would be nice if I didn't need that.




[x] - Make it not allow regexes to match whitespace no matter what, by finding the first whitespace character and cutting off the match there.
[x] - Finish filling in specSpec, specifically the "look" part. The look should just consider any tokens without whitespace
    (which requires the previouis TODO to make it possible).
    Also, underscores should be name holes. But somehow it should be possible to also match underscores themselvesls
    ?
[x] - Equalities and Disequalities in specSpec
[x] - Decide how I want constants vs variables to look in the spec language.
    - Maybe constants are capitalized? Should I write out which variables will be bound locally?
[o] - Make it so metavariables only appear in typing rules (technically I could be lazy and not do this... or even say its a feature...)
[ ] - In specSpec, make something so that the look has to line up with the number of premises.
[x] - In specSpec, add parens for terms
[x] - In specSpec, make simplified syntax for lambdas with multiple args
[x] - Add hidden premises to specSpec.
[x] - Write code that reads a parsed specSpec ast and builds a lang
[x] - in specSpec, make a way to deal with regexes.
    - All I need to do is make string literals, you can already write "Regex ?x _".
[ ] - Make it so that errors resulting from leftover hidden constraints are displayed
[ ] - Figure out some way that you can specify the top sort in the spec. Or maybe the top sort is always just "Top" or something.
[ ] - It can be confusing the difference between parse and type error. Maybe make parser prefer matches with correct sort, but if it doesn't work
    then uses any match? Or maybe that makes no sense with backtracking involved?
    Maybe there is just a routine that runs when there are no rules that fit, which checks if any rule would fit if sorts weren't an issue, and
    then makes a special error message saying that it doesn't unify?
[ ] - Implement the "messages" section of the lang
[ ] - Write code that prints out a tree of labels, given a lang describing the looks.
    - Will also need to deal with regexSort stuff.